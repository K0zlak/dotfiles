"LEADER - - - - - - - - - {{{
let mapleader = " "
let maplocalleader = "\\"

"}}}

"SHELL config {{{

"Set this to enable vim use bash aliases
let $BASH_ENV="~/.bash_aliases"

"}}}

"OPTIONS - - - - - - - - - {{{
    "BASIC OPTIONS {{{
"enable syntax and plugins
filetype plugin on
set encoding=UTF-8
"By pressing <S-K> the command beneath keywordprg is launched with word under a cursor
"as the parameter. The keyword is defined by the iskeyword parameter.

set keywordprg=:help

"Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

set nocompatible              " be iMproved, required filetype off required

"Set spelling
set spelllang=pl,en

set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"With both on.searches with no capitals are case insensitive, while searches with
"a capital characters are case sensitive.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch 		" Highlight all matches
set hidden		" Hide buffers when they are abandoned
set autowrite		" Automatically save before commands like :next and :make
set autoread        "Automatically read the file if the change outside of vim is detected
set history=1000	" Set how many entries may be stored in each of the histories
set scrolloff=10	" set how many lines to keep above and below the cursor.
set sidescrolloff=5	" set how many lines to keep right and left the cursor.
"Persistent undo,even if you close and reopen Vim.Super great when combined with
"the undotree plugin.
if has ('persistent_undo')
    let target_path = expand('~/.config/vim-persisted-undo/')

    if !isdirectory(target_path)
        call system('mkdir -p ' . target_path)
    endif

    let &undodir = target_path
    set undofile
endif

" set a vertical and horizontal line where cursor is.
:set cursorcolumn
:set cursorline

" Zmiana zachowania dopeÅ‚niania <TAB> np w linii komend :e < Å›cieÅ¼ka do
" pliku> doczytaÄ‡ pÃ³Åºniej i poeksperymentowaÄ‡
set wildmode=list:longest,full
" WÅ‚Ä…czenie menu propozycji
" Po wciÅ›niÄ™ciu <TAB> np e W komendzie :e C:\ nad liniÄ… komend "
" pojawia siÄ™ menu z propozycjami z danego katalogu
set wildmenu

set backspace=2   " Backspace deletes like most programs in insert mode
set autoindent		"use the indent of the previous line "
set wrap            "Wrap long lines
set linebreak       "Wrapping lines don't happen on last characters on the screen
set breakindent     "After wrapping all wrapped continue visually indented
set browsedir=buffer


" Display extra white space
set list listchars=tab:Â»Â·,trail:Â·,nbsp:Â· ",space:Â·

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

set ruler

" By CTRL+A and CTRL+X we can add and subtract to
" numbers and to alphanumeric characters
" nformat contain on what format it will work
"set nrformats+=alpha
"Donot redraw screen in the middle of a macro.Makes them complete faster
set lazyredraw

"TABS TO 4 SPACES
set tabstop=4
set shiftwidth=4
set expandtab

" Set visualBell instead annoying sound bell in case of error
set visualbell
" set line numbers
:set number
" set relative numbers
:set relativenumber

" }}}
    "Folding {{{
"Makes fold visible in the sidebar.The higher n is, the more folds are
"represented visually and the fewer are represented by a number.
set foldcolumn=5

" Taken form Steve Losh https://bitbucket.org/sjl/dotfiles/src/default/vim/vimrc
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '>' . repeat(" ",fillcharcount) . foldedlinecount . '<' . ' '
endfunction " }}}

set foldtext=MyFoldText()

" }}}
    "SPLITS {{{
"Open new split panes to right and bottom, which feels more natural than Vimâ€™s default:
set splitbelow
set splitright

" }}}

" }}}

"BINDINGS - - - - - - - - - {{{

"Line movement
nnoremap H	zH
nnoremap L	zL
"CHANGE Y KEY TO BE MORE CONSISTENT WITH D AND C KEYS.
nnoremap Y y$
"PANES
"MAX THE CURRENT PANE
nnoremap <C-W>m <C-W>_<C-W>\|
"MAP TO SHOW TREE FILE
nnoremap <Leader>n :NERDTreeToggle<CR>

"LOREM IPSUM GENERATOR BINDINGS
nnoremap <leader>lw :<C-U>call LoremWords(v:count1)<CR>
nnoremap <leader>ls :<C-U>call LoremSentenses(v:count1)<CR>
nnoremap <leader>lp :<C-U>call LoremParagraphs(v:count1)<CR>
nnoremap <leader>lr :<C-U>call LoremRandomWords(0,v:count1)<CR>

""Go TO NORMAL MODE
inoremap jk <ESC>
vnoremap jk <ESC>
cnoremap jk <ESC>

"Yank into system ClipBoard
nnoremap <Leader>y :'<,'>w !clip.exe<CR>
vnoremap <Leader>y :'<,'>w !clip.exe<CR>
"Paste to WSL for Windows Clipboard
nnoremap <Leader>p :<C-U>call PasteToWSL_FromWindows()<CR>

"SEARCHING
"Set on scrolloff option and it work well
nnoremap n nzz
nnoremap N Nzz
" TERMINAL
"nnoremap <Leader>T  :wincmd b \| bel terminal ++rows=10<CR>
nnoremap <Leader>T :execute('terminal')<CR>
nnoremap <Leader>cd :lcd %:p:h<CR>
tnoremap <Leader>qt <C-W>N

"TAGBAR
nnoremap <F4>	:TagbarToggle<CR>
" ++ CLEAR THE SCREEN AND REDRAW
nnoremap  <Leader>h :nohlsearch<CR>

"RESIZING SPLITS WITH CTRL+ ARROWS
nnoremap <C-UP> <C-W>+
nnoremap <C-DOWN> <C-W>-
nnoremap <C-LEFT> <C-W><
nnoremap <C-RIGHT> <C-W>>

nnoremap j  gj
nnoremap k  gk

" In visual mode move highlighted tex with K and J
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv
"SEARCHING WITH DEFAULT VERY MAGIC
nnoremap / /\v
nnoremap ? ?\v
"SEARCHING IN VISUAL MODE ON SELECTED TEXT WITH DEFAULT VERY MAGIC
xnoremap / <ESC>/\%V\v
xnoremap ? <ESC>/\%V\v

"MACROS
"INSTEAD OF STUMBLING INTO EX MODE, REPEAT THE LAST COMMAND USED.
nnoremap Q :@:<CR>

"RUN THE CURRENT LINE AS IF IT WERE A COMMAND.OFTEN MORE CONVENIENT THAN Q:
"WHEN EXPERIMENTING.
nnoremap <Leader><Leader>e :exe getline(line('.'))<cr>

"GOYO
nnoremap <F6> :Goyo<CR>
"Dot repeat previous behaviour and leave the cursor at the point where it was before editing started
"nnoremap g. <Plug>(RepeatDot)`[
"Alt + Dot ( <A-?> or <M-?> don't work)
"nnoremap	.	  `[<Down>.
"ADD DOT "." REPEAT ACTION FOR VISUAL MODE
vnoremap . :norm.<CR>


" "" AUTOCOMPLETE BRACKETS
" inoremap "" ""<left>
" inoremap '' ''<left>
" inoremap [[ []<left>
" inoremap (( ()<left>
" inoremap {{ {}<left>
" inoremap {{<CR> {<CR>}<ESC>O
" inoremap {<CR> {<CR>};<ESC>O

"AUTOMATE ADD SEMICOLON ON THE END OF THE LINE

" nnoremap jj <nop>
" nnoremap kk <nop>
" nnoremap ll <nop>
" nnoremap hh <nop>

" FZF {{{
nnoremap <silent><leader>fbt :BTags<CR>
nnoremap <silent><leader>ft :Tags<CR>
nnoremap <silent><leader>fc :BCommits<CR>
nnoremap <silent><leader>f/ :History/<CR>
nnoremap <silent><leader>f: :History:<CR>
nnoremap <silent><leader>fh :History<CR>
nnoremap <silent><leader>fg :GFiles<CR>
nnoremap <silent><leader>fm :Marks<CR>
nnoremap <silent><leader>ff :FZF<CR>
nnoremap <silent><leader>fb :Buffers<CR>
nnoremap <silent><leader>rg :execute 'Rg '.expand('<cword>')<CR>

" let $FZF_DEFAULT_OPTS .= ' --reverse --info=inline'

" }}}

" }}}

"PLUGINS - - - - - - - - - - {{{


" set the runtime path to include Vundle and initialize
 set rtp+=~/.vim/bundle/Vundle.vim

 call vundle#begin()


" let Vundle manage Vundle, required

Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-dadbod.git'
Plugin 'valloric/youcompleteme'
Plugin 'scrooloose/nerdtree'
Plugin 'chriskempson/base16-vim'
Plugin 'rainbow_parentheses.vim'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'ap/vim-css-color'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-commentary'
Plugin 'majutsushi/tagbar'
Plugin 'ludovicchabant/vim-gutentags'
Plugin 'blueyed/vim-diminactive'
Plugin 'vim-airline/vim-airline'
Plugin 'sjl/gundo.vim'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/vim-peekaboo'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tmhedberg/matchit'
Plugin 'tpope/vim-fugitive'
Plugin 'junegunn/gv.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'junegunn/vim-easy-align'
Plugin  'wellle/targets.vim'
Plugin  'morhetz/gruvbox.git'

" All of your Plugins must be added before the following line
 call vundle#end()            " required
 filetype plugin indent on    " required

"}}}

"PLUGINS CONFIGS  - - - - - - - - - - {{{
"MY_FUNCTIONS {{{


"PASTE FROM SYSTEM CLIPBOARD " {{{

function InsertTextIntoLine(text) "{{{
    let textToInsert = a:text
    let line = getline('.')
    let pos = col('.')-1
    if pos > 0
        let line = line[:pos-1] . textToInsert . line[pos:]
    else
        let line = textToInsert . line[pos:]
    endif
    call setline('.', line)

endfunction "}}}

 function PasteToWSL_FromWindows() "{{{
    let systemClipboard = system("powershell.exe -Command Get-Clipboard")
    call InsertTextIntoLine(systemClipboard)
 endfunction "}}}

"}}}
"LOREM IPSUM {{{
function LoremSentenses(count) " {{{
    let lorem = system("lorem -s " . a:count )
    call InsertTextIntoLine(lorem)
endfunction " }}}

function LoremWords(count) " {{{
    let lorem = system("lorem -w " . a:count )
    call InsertTextIntoLine(lorem)
endfunction " }}}

function LoremParagraphs(count) " {{{
    let lorem = system("lorem -p " . a:count )
    call InsertTextIntoLine(lorem)
endfunction " }}}

function LoremRandomWords(firstCount,secondCount)  " {{{
    let seed = srand()
    let randomNumber = rand(seed) % (a:secondCount - a:firstCount) + a:firstCount " random number 1 - count
    let lorem = system("lorem -w " . randomNumber)
    call InsertTextIntoLine(lorem)
endfunction " }}}

"}}}
"}}}


    "GUNDO_CONFIG {{{

nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_bottom=1
let g:gundo_right=1
let g:gundo_prefer_python3=1
let g:gundo_return_on_revert=0

" }}}
    "YCM_CONFIG {{{

let g:ycm_filetype_whitelist = { 'java': 1}
autocmd FileType java set tags+=~/.tags/java.tags

" YouCompleteMe options

let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1

"will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1


let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 1 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''


let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info


"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
"let g:ycm_confirm_extra_conf = 1


let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = '<TAB>'

" }}}
    "NATREW_CONFIG {{{

"Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_winsize =25
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

 let g:netrw_browsex_viewer   = "cmd.exe /C start"

" }}}
    "DELIMITMATE {{{

let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

" }}}
    "GOYO_CONFIG {{{

let g:goyo_width=100
let g:goyo_height=150

    function! s:goyo_enter()
      silent !tmux set status off
      silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
      set noshowmode
      set noshowcmd
      set scrolloff=999
      set nocursorline
      set nocursorcolumn
    endfunction

    function! s:goyo_leave()
      silent !tmux set status on
      silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
      set showmode
      set showcmd
      set scrolloff=5
      set nocursorline
      set nocursorcolumn
    endfunction

    autocmd! User GoyoEnter nested call <SID>goyo_enter()
    autocmd! User GoyoLeave nested call <SID>goyo_leave()

" }}}
    "FZF {{{

" "}}}
    "MISC {{{
"Set on the left a diff tab
":diffthis
let g:hardtime_default_on = 1
set statusline+=%{gutentags#statusline()}
"packadd! matchit
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap gA <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gA <Plug>(EasyAlign)

" " make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
"let g:ycm_key_list_accept_completion = ['<C-y>']
""let g:SuperTabDefaultCompletionType = '<C-j>'

"" better key bindings for UltiSnipsExpandTrigger
"let g:UltiSnipsExpandTrigger = '<Tab>'
"let g:UltiSnipsJumpForwardTrigger = '<Tab>'
"let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

" Write all buffers before navigating from Vim to tmux pane
 let g:tmux_navigator_save_on_switch = 2
" Disable tmux navigator when zooming the Vim pane
 let g:tmux_navigator_disable_when_zoomed = 1

"Diminactive plugin
let g:diminactive_filetype_blacklist = ['startify']
 let g:diminactive_use_syntax = 0
 " }}}

"}}}

"AUTOCOMMANDS - - - - - - - - - - {{{

"At save remove all trailing white spaces
fun! StripTrailingWhitespace()
" Only strip if the b:noStripeWhitespace variable isn't set
	if exists('b:noStripWhitespace')
		return
	endif
		%s/\s\+$//e
	endfun

autocmd BufWritePre * call StripTrailingWhitespace()
autocmd FileType markdown tex let b:noStripWhitespace=1
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o


"Rainbow Plugin
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" }}}

"FILETYPES {{{

" Java {{{
"SteveLosh's https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
augroup ft_java
    au!
    au FileType java setlocal foldmethod=marker
    au FileType java setlocal foldmarker={,}
    au FileType java setlocal foldlevelstart=1
    " au FileType java inoremap <c-n> <c-x><c-]>
augroup END
" }}}

" VIM {{{
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
    " au FileType vim setlocal foldmarker={,}
    au FileType vim setlocal foldlevelstart=1
    " au FileType vim inoremap <c-n> <c-x><c-]>
augroup END
" }}}


" GIT {{{
augroup ft_git
    au FileType git setlocal spell
augroup END
"}}}

" TEX {{{
augroup ft_tex
    au FileType tex setlocal spell
augroup END
"}}}

" BASH {{{
augroup ft_bash
    au FileType bash,sh setlocal spell
    au FileType bash,sh setlocal foldmethod=marker
    au FileType bash,sh setlocal foldmarker={,}
    au FileType bash,sh setlocal foldlevelstart=1
augroup END
"}}}

" GITCOMMIT {{{
augroup ft_gitcommit
    au FileType gitcommit setlocal spell
augroup END
"}}}
" }}}

"COLOR_SYNTAX{{{


"""" Enable coloring syntax
if has("syntax")
	syntax enable
endif

"Use true colors in vim under tmux
if exists('+termguicolors')
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	set t_ut=
	set termguicolors
endif

""Set highlighting color errors

    " augroup my_colors
    "     autocmd!
    "     autocmd ColorScheme  base16-monokai hi SpellBad cterm=reverse
    " augroup END

colorscheme	base16-monokai

"Spelling coloring
highlight IncSearch guibg=firebrick2
" highlight SpellBad guifg=firebrick2
highlight SpellBad gui=undercurl
highlight SpellBad cterm=underline
highlight Visual guibg=#5f87d7

" }}}
