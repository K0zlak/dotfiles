"LEADER - - - - - - - - - {{{
let mapleader = " "
let maplocalleader = "\\"

" set directory=~/.config/vim-swapfile//,/home/mikoz/tmp,/var/tmp,/tmp
"}}}

"SHELL config {{{

"Set this to enable vim use bash aliases
let $BASH_ENV="~/.bash_aliases"

"}}}

"OPTIONS - - - - - - - - - {{{
    "BASIC OPTIONS {{{
"enable syntax and plugins
filetype plugin on
set encoding=UTF-8
"By pressing <S-K> the command beneath keywordprg is launched with word under a cursor
"as the parameter. The keyword is defined by the iskeyword parameter.
set keywordprg=:help

"Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

set nocompatible              " be iMproved, required filetype off required

"Set spelling
set spelllang=pl,en

set showcmd         " Show (partial) command in status line.
set showmatch       " Show matching brackets.
"With both on.searches with no capitals are case insensitive, while searches with a capital characters are case sensitive.
set ignorecase      " Do case insensitive matching
set smartcase       " Do smart case matching
set incsearch       " Incremental search
set hlsearch        " Highlight all matches
set hidden          " Hide buffers when they are abandoned
set autowrite       " Automatically save before commands like :next and :make
set autoread        "Automatically read the file if the change outside of vim is detected
set history=1000    " Set how many entries may be stored in each of the histories
set scrolloff=5     " set how many lines to keep above and below the cursor.
set sidescrolloff=5 " set how many lines to keep right and left the cursor.

"Persistent undo,even if you close and reopen Vim.Super great when combined with
"the undotree plugin.
if has ('persistent_undo')
    let target_path = expand('~/.config/vim-persisted-undo/')

    if !isdirectory(target_path)
        call system('mkdir -p ' . target_path)
    endif

    let &undodir = target_path
    set undofile
endif

" set a vertical and horizontal line where cursor is.
set cursorcolumn
set cursorline

" Zmiana zachowania dopeÅ‚niania <TAB> np w linii komend :e < Å›cieÅ¼ka do
" pliku> doczytaÄ‡ pÃ³Åºniej i poeksperymentowaÄ‡
" set wildmode=list:longest,full
set wildmode=full
" WÅ‚Ä…czenie menu propozycji
" Po wciÅ›niÄ™ciu <TAB> np e W komendzie :e C:\ nad liniÄ… komend "
" pojawia siÄ™ menu z propozycjami z danego katalogu
set wildmenu
set wildignore+=*.swp

set backspace=2   " Backspace deletes like most programs in insert mode
set autoindent      "use the indent of the previous line "
set wrap            "Wrap long lines
set linebreak       "Wrapping lines don't happen on last characters on the screen
set breakindent     "After wrapping all wrapped continue visually indented
set browsedir=buffer


" Display extra white space
set list listchars=tab:Â»Â·,trail:Â·,nbsp:Â· ",space:Â·

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

set ruler

" By CTRL+A and CTRL+X we can add and subtract to
" numbers and to alphanumeric characters
" nformat contain on what format it will work
"set nrformats+=alpha
"Donot redraw screen in the middle of a macro.Makes them complete faster
set lazyredraw

"TABS TO 4 SPACES
set tabstop=4
set shiftwidth=4
set expandtab

" Set visualBell instead annoying sound bell in case of error
set visualbell
" set line numbers
set number
" set relative numbers
set relativenumber

" }}}
    "Folding {{{
"Makes fold visible in the sidebar.The higher n is, the more folds are
"represented visually and the fewer are represented by a number.
" set foldcolumn=5
set foldopen-=block



" Taken form Steve Losh https://bitbucket.org/sjl/dotfiles/src/default/vim/vimrc
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '>' . repeat(" ",fillcharcount) . foldedlinecount . '<' . ' '
endfunction " }}}

set foldtext=MyFoldText()

" }}}
    "SPLITS {{{
"Open new split panes to right and bottom, which feels more natural than Vimâ€™s default:
set splitbelow
set splitright

" }}}

" }}}

"BINDINGS - - - - - - - - - {{{

"Horizontal Line movement
" nnoremap H  zH
" nnoremap L  zL
nnoremap H  ^
vnoremap H  ^
onoremap H  ^
nnoremap L  g_
vnoremap L  g_
onoremap L  g_


"CHANGE Y KEY TO BE MORE CONSISTENT WITH D AND C KEYS.
nnoremap Y y$
"PANES
"MAX THE CURRENT PANE
nnoremap <C-W>m <C-W>_<C-W><bar>
"MAP TO SHOW TREE FILE
nnoremap <Leader>n <CMD>NERDTreeToggle<CR>



" set window height to 5 by default
" nnoremap <Leader>W 5_
nnoremap <Leader>+ <CMD> resize +5<CR>
nnoremap <Leader>- <CMD> resize -5<CR>
" set window width to 5 by default
" nnoremap <Leader>H 5<bar>


""LOREM IPSUM GENERATOR BINDINGS WITH VIM-REPEAT
nnoremap <Plug>LoremWord :<C-U>call InsertTextIntoLine(LoremWords(v:count1))<BAR>
            \ silent! call repeat#set("\<Plug>LoremWord", v:count)<CR>
nnoremap <Plug>LoremSentense   :<C-U>call InsertTextIntoLine(LoremSentenses(v:count1))<BAR>
            \ silent! call repeat#set("\<Plug>LoremSentense", v:count)<CR>
nnoremap <Plug>LoremParagraph  :<C-U>call InsertTextIntoLine(LoremParagraphs(v:count1))<BAR>
            \ silent! call repeat#set("\<Plug>LoremParagraph", v:count)<CR>
nnoremap <Plug>LoremRandomWord :<C-U>call InsertTextIntoLine(LoremRandomWords(0,v:count1))<BAR>
            \ silent! call repeat#set("\<Plug>LoremRandomWord", v:count)<CR>

nmap <leader>lw <Plug>LoremWord
nmap <leader>ls <Plug>LoremSentense
nmap <leader>lp <Plug>LoremParagraph
nmap <leader>lr <Plug>LoremRandomWord

vnoremap <leader>lw c<C-R>=LoremWords(v:count1)<CR>gv
vnoremap <leader>ls c<C-R>=LoremSentenses(v:count1)<CR>gv
vnoremap <leader>lp c<C-R>=LoremParagraphs(v:count1)<CR>gv
vnoremap <leader>lr c<C-R>=LoremRandomWords(0,v:count1)<CR>gv




""Go TO NORMAL MODE
inoremap jk <ESC>


"SPLIT :OPOSITE TO 'J' THE LAST HL IS TO NEXT <K>(UP) NOT TAKE CURSOR TO THE LAST
" POSITION OF THE NEXT LINE BUT TO SIGN ABOVE CURRENT ON
nnoremap S i <ESC>k$hl

"Yank into system ClipBoard
vnoremap Y :w !clip.exe<CR>

"Paste to WSL for Windows Clipboard
vnoremap P :<C-U>call PasteToWSL_FromWindows()<CR>

" WRITING FILES
nnoremap <Leader>w <CMD>w<CR>
"SEARCHING
"Set on scrolloff option and it work well
nnoremap n nzz
nnoremap N Nzz

"SEARCHING WITH DEFAULT VERY MAGIC
nnoremap / /\v
nnoremap ? ?\v

"DEFAULT SEARCHING
nnoremap <Leader>/ /
nnoremap <Leader>? ?

"SEARCHING IN VISUAL MODE ON SELECTED TEXT WITH DEFAULT VERY MAGIC
xnoremap <Leader>/ /\%V\v
xnoremap <Leader>? /\%V\v

" CHANGE THE DEFAULT BEHAVIOUR OF JUMPING TO THE NEXT MATCH TO CURSOR POSITION REMAIN IN THE SAME SPACE
nnoremap * *N
nnoremap g* g*N
nnoremap g# g#N
nnoremap # #N

" ++ CLEAR THE SCREEN AND REDRAW
nnoremap  <Leader>h <CMD>nohlsearch<CR>

" TERMINAL
"nnoremap <Leader>T  :wincmd b \| bel terminal ++rows=10<CR>
" nnoremap <Leader>T :execute('terminal')<CR>
" nnoremap <Leader>cd :lcd %:p:h<CR>
" tnoremap <Leader>qt <C-W>N

"TAGBAR
" nnoremap <F4>   :TagbarToggle<CR>

"RESIZING SPLITS WITH CTRL+ ARROWS
nnoremap <C-UP> <C-W>+
nnoremap <C-DOWN> <C-W>-
nnoremap <C-LEFT> <C-W><
nnoremap <C-RIGHT> <C-W>>

nnoremap j  gj
nnoremap k  gk

" In visual mode move highlighted tex with K and J
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

"MACROS
" nnoremap Q <CMD>@:<CR>

"WHEN EXPERIMENTING.

nnoremap <F6> <CMD>Goyo<CR>
"nnoremap g. <Plug>(RepeatDot)`[
"nnoremap   .   `[<Down>.
vnoremap . <CMD>norm.<CR>
"ADD DOT "." REPEAT ACTION FOR VISUAL MODE
"Alt + Dot ( <A-?> or <M-?> don't work)
"Dot repeat previous behaviour and leave the cursor at the point where it was before editing started
"GOYO
nnoremap <Leader><Leader>e <CMD>exe getline(line('.'))<cr>
"RUN THE CURRENT LINE AS IF IT WERE A COMMAND.OFTEN MORE CONVENIENT THAN Q:
nnoremap Q @@
"INSTEAD OF STUMBLING INTO EX MODE, REPEAT THE LAST COMMAND USED.

" REBIND <UP> AND <DOWN> FOR ^K AND ^J FOR EASIER COMMAND LINE HISTORY USE
cnoremap  <C-K> <UP>
cnoremap  <C-J> <DOWN>

" BUFFFER ACTION
nnoremap <leader>bd <CMD>bd<CR>
nnoremap <leader>bO <CMD>%bd<bar>e#<bar>bd# <CR>


" FZF {{{
nnoremap <silent><leader>fbt <CMD>BTags<CR>
nnoremap <silent><leader>ftt <CMD>Tags<CR>
nnoremap <silent><leader>fbc <CMD>BCommits<CR>
nnoremap <silent><leader>f/ <CMD>History/<CR>
nnoremap <silent><leader>f: <CMD>History:<CR>
nnoremap <silent><leader>fh <CMD>History<CR>
nnoremap <silent><leader>fg <CMD>GFiles<CR>
nnoremap <silent><leader>fm <CMD>Marks<CR>
nnoremap <silent><leader>ff <CMD>FZF<CR>
nnoremap <silent><leader>fF <CMD>HFiles<CR>
nnoremap <silent><leader>fB <CMD>Buffers<CR>
nnoremap <silent><leader>rg <CMD>execute 'Rg '.expand('<cword>')<CR>

command! -bang -nargs=? -complete=dir HFiles
  \ call fzf#vim#files(<q-args>, {'source': 'ag --hidden --ignore .git -g ""'}, <bang>0)
" let $FZF_DEFAULT_OPTS .= ' --reverse --info=inline'

" }}}

" }}}

"PLUGINS - - - - - - - - - - {{{
if !has('nvim')
call plug#begin('~/.vim/plugged')


        "" TIM POPE PLUGINS

        " Plugin 'tpope/vim-dadbod.git'
        " Plugin 'tpope/vim-speeddating'
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'
        Plug 'tpope/vim-commentary'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-unimpaired'

        "" JUNEGUNN PLUGINS

        Plug 'junegunn/fzf'
        Plug 'junegunn/fzf.vim'
        Plug 'junegunn/goyo.vim'
        Plug 'junegunn/vim-peekaboo'
        Plug 'junegunn/gv.vim'
        Plug 'junegunn/vim-easy-align'

        " Plugin 'valloric/youcompleteme'
        Plug 'airblade/vim-gitgutter'
        Plug 'scrooloose/nerdtree'
        Plug 'kien/rainbow_parentheses.vim'
        " Plugin 'ap/vim-css-color'
        Plug 'majutsushi/tagbar'
        Plug 'ludovicchabant/vim-gutentags'
        Plug 'blueyed/vim-diminactive'
        Plug 'vim-airline/vim-airline'
        Plug 'sjl/gundo.vim'
        Plug 'christoomey/vim-tmux-navigator'
        " Plugin 'tmhedberg/matchit'

        "java plugin
        Plug 'uiiaoo/java-syntax.vim'
        " COLOR SCHEMAS
        Plug  'morhetz/gruvbox'
        " Plugin 'chriskempson/base16-vim'

        "TEXT OBJECTS
        Plug  'wellle/targets.vim'
        Plug 'michaeljsmith/vim-indent-object'
        Plug  'kana/vim-textobj-function'
        Plug  'kana/vim-textobj-user'
        Plug 'kana/vim-textobj-entire'
        Plug 'mattn/vim-textobj-url'
        Plug 'glts/vim-textobj-comment'
        " Plugin 'paulhybryant/vim-textobj-path'


call plug#end()

endif

 filetype plugin indent on

"}}}

"PLUGINS CONFIGS & BINDINGS - - - - - - - - - - {{{
"MY_FUNCTIONS {{{


"PASTE FROM SYSTEM CLIPBOARD " {{{

function! InsertTextIntoLine(text) "{{{
    let textToInsert = a:text
    let line = getline('.')
    let pos = col('.')-1
    if pos > 0
        let line = line[:pos-1] . textToInsert . line[pos:]
    else
        let line = textToInsert . line[pos:]
    endif
    call setline('.', line)

endfunction "}}}

 function! PasteToWSL_FromWindows() "{{{
    let systemClipboard = system("powershell=\"$(powershell.exe -Command Get-Clipboard)\" ; echo -n \"${powershell//[$'\r\n\t']}\"")
    call InsertTextIntoLine(systemClipboard)
 endfunction "}}}

"}}}
"LOREM IPSUM {{{
function! LoremSentenses(count) " {{{
    let lorem = system("lorem -s " . a:count )
    return lorem
endfunction " }}}

function! LoremWords(count) " {{{
    let lorem = system("lorem -w " . a:count )
    return lorem
endfunction " }}}

function! LoremParagraphs(count) " {{{
    let lorem = system("lorem -p " . a:count )
    return lorem
endfunction " }}}

function! LoremRandomWords(firstCount,secondCount)  " {{{
    let seed = srand()
    let randomNumber = rand(seed) % (a:secondCount - a:firstCount) + a:firstCount " random number 1 - count
    let lorem = system("lorem -w " . randomNumber)
    return lorem
endfunction " }}}

"}}}
"}}}


    "GUNDO_CONFIG {{{
nnoremap <F5> <CMD>GundoToggle<CR>
let g:gundo_preview_bottom=1
let g:gundo_right=1
let g:gundo_prefer_python3=1
let g:gundo_return_on_revert=0

" }}}
    "YCM_CONFIG {{{

"let g:ycm_filetype_whitelist = { 'java': 1}
"autocmd FileType java set tags+=~/.tags/java.tags

"" YouCompleteMe options

"let g:ycm_register_as_syntastic_checker = 1 "default 1
"let g:Show_diagnostics_ui = 1 "default 1

""will put icons in Vim's gutter on lines that have a diagnostic set.
""Turning this off will also turn off the YcmErrorLine and YcmWarningLine
""highlighting
"let g:ycm_enable_diagnostic_signs = 1
"let g:ycm_enable_diagnostic_highlighting = 0
"let g:ycm_always_populate_location_list = 1 "default 0
"let g:ycm_open_loclist_on_ycm_diags = 1 "default 1


"let g:ycm_complete_in_strings = 1 "default 1
"let g:ycm_collect_identifiers_from_tags_files = 1 "default 0
"let g:ycm_path_to_python_interpreter = '' "default ''


"let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
"let g:ycm_server_log_level = 'info' "default info


""let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
""let g:ycm_confirm_extra_conf = 1


"let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
"let g:ycm_filetype_whitelist = { '*': 1 }
"let g:ycm_key_invoke_completion = '<TAB>'

""YCM BINDINGS
"vnoremap <Leader>gi  :YcmCompleter GoToImplementation<CR>
"vnoremap <Leader>yr  :YcmCompleter RefactorRename<CR>
"vnoremap gd          :YcmCompleter GoToDefinition<CR>
"vnoremap <Leader>yfi :YcmCompleter FixIt<CR>
"vnoremap <Leader>yff :YcmCompleter Format<CR>
"vnoremap <Leader>yR  :YcmRestartServer<CR>
"vnoremap gD          :YcmCompleter GoToDeclaration<CR>

"nnoremap <Leader>gi  :YcmCompleter GoToImplementation<CR>
"nnoremap <Leader>yr  :YcmCompleter RefactorRename<CR>
"nnoremap gd :YcmCompleter GoToDefinition<CR>
"nnoremap <Leader>yfi :YcmCompleter FixIt<CR>
"nnoremap <Leader>yff :YcmCompleter Format<CR>
"nnoremap <Leader>yR  :YcmRestartServer<CR>
"nnoremap gD :YcmCompleter GoToDeclaration<CR>

" }}}
    "NATREW_CONFIG {{{

"Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_winsize =25
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

 let g:netrw_browsex_viewer   = "cmd.exe /C start"
" }}}
    "DELIMITMATE {{{

let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

" }}}
    "GOYO_CONFIG {{{

let g:goyo_width=100
let g:goyo_height=150

    function! s:goyo_enter()
      silent !tmux set status off
      silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
      set noshowmode
      set noshowcmd
      set scrolloff=999
      set nocursorline
      set nocursorcolumn
    endfunction

    function! s:goyo_leave()
      silent !tmux set status on
      silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
      set showmode
      set showcmd
      set scrolloff=5
      set nocursorline
      set nocursorcolumn
    endfunction

    autocmd! User GoyoEnter nested call <SID>goyo_enter()
    autocmd! User GoyoLeave nested call <SID>goyo_leave()

" }}}
    "FZF {{{

" "}}}
    "MISC {{{
"Set on the left a diff tab
":diffthis
let g:hardtime_default_on = 1
set statusline+=%{gutentags#statusline()}
"packadd! matchit

" EASY-ALIGN CONFIGURATION {{{

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap gA <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gA <Plug>(EasyAlign)

" Start live interactive EasyAlign in visual mode (e.g. vipga)
xmap gL <Plug>(LiveEasyAlign)

" Start live interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gL <Plug>(LiveEasyAlign)

" }}}

" Write all buffers before navigating from Vim to tmux pane
 let g:tmux_navigator_save_on_switch = 1
" Disable tmux navigator when zooming the Vim pane
 let g:tmux_navigator_disable_when_zoomed = 1

 "DIMINACTIVE PLUGIN {{{
 let g:diminactive_buftype_blacklist = ['nofile', 'nowrite', 'acwrite', 'quickfix', 'help']
 let g:diminactive_filetype_blacklist = ['startify']
 let g:diminactive_use_syntax = 0
 let g:diminactive_enable_focus = 1

" }}}

 " }}}

"}}}

"AUTOCOMMANDS - - - - - - - - - - {{{

"At save remove all trailing white spaces
fun! StripTrailingWhitespace()
" Only strip if the b:noStripeWhitespace variable isn't set
    if exists('b:noStripWhitespace')
        return
    endif
        %s/\s\+$//e
    endfun

autocmd BufWritePre * call StripTrailingWhitespace()
autocmd FileType markdown,tex let b:noStripWhitespace=1
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o


if !has('nvim')
    "Rainbow Plugin
    au VimEnter * RainbowParenthesesToggleAll
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
    au Syntax * RainbowParenthesesLoadChevrons

    au TerminalOpen * set nonumber
    au TerminalOpen * set norelativenumber
    au TerminalOpen * set foldcolumn=0
endif
" }}}

"FILETYPES {{{

" Java {{{
"SteveLosh's https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
augroup ft_java
    au!


    " set foldmethod=syntax
    " syn region javaMethod start="^\z(\s*\)\(public\|private\|protected\)\_.*{\s*$" end="^\z1}\s*$" transparent fold keepend
    " syn region javaLoop start="^\z(\s*\)\(for\|if\|while\|switch\).*{\s*$" end="^\z1}\s*$" transparent fold keepend
    " syn region javaCase start="^\z(\s*\)\(case\|default\).*:\s*$" end="^\s*break;\s*$" transparent fold keepend
    " syn region javaTryCatch start="^\z(\s*\)\(try\|catch\).*{\s*$" end="^\z1}\s*$" transparent fold keepend
    " syn region javadoc start="^\s*/\*\*" end="^.*\*/" transparent fold keepend
    " syn region javaBlockComment start="^\s*/\*" end="^.*\*/" transparent fold keepend"""""""""""}))""""))""""}))""""}))"

    au FileType java setlocal suffixesadd+=.java
    au FileType java setlocal foldmethod=marker
    au FileType java setlocal foldmarker={,}
    au FileType java setlocal foldlevelstart=10
    au FileType java setlocal iskeyword-=_
    " au FileType java inoremap <c-n> <c-x><c-]>

if ! has('nvim')
    au VimEnter * RainbowParenthesesToggleAll
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
    au Syntax * RainbowParenthesesLoadChevrons
endif

augroup END
" }}}

" VIM {{{
augroup ft_vim
    au!
    " au FileType vim setlocal foldmethod=marker
    " au FileType vim setlocal foldmarker={,}
    " au FileType vim setlocal foldlevelstart=1
    " au FileType vim inoremap <c-n> <c-x><c-]>
augroup END
" }}}


" GIT {{{
augroup ft_git
    au FileType git setlocal spell
augroup END
"}}}

" TEX {{{
augroup ft_tex

    au FileType tex syntax spell toplevel
    au FileType tex setlocal spell
augroup END
"}}}

" BASH {{{
augroup ft_bash
    au FileType bash,sh setlocal spell
    au FileType bash,sh setlocal foldmethod=marker
    au FileType bash,sh setlocal foldmarker={,}
    au FileType bash,sh setlocal foldlevelstart=1
augroup END
"}}}

" GITCOMMIT {{{
augroup ft_gitcommit
    au FileType gitcommit setlocal spell
augroup END
"}}}
" }}}

"COLOR_SYNTAX{{{

set background=dark

colorscheme gruvbox

if has("syntax")
    syntax enable
endif

"Use true colors in vim under tmux
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set t_ut=
    set termguicolors
endif

""Set highlighting color errors

    " augroup my_colors
    "     autocmd!
    "     autocmd ColorScheme  base16-monokai hi SpellBad cterm=reverse
    " augroup END


"Spelling coloring
highlight IncSearch guibg=firebrick2
" highlight SpellBad guifg=firebrick2
highlight SpellBad gui=undercurl
highlight SpellBad cterm=underline
highlight Visual guibg=#5f87d7

" }}}
