 #############################################################
 ## VI INSERT Mode Key map
 #############################################################

set keymap vi-insert
"\C-w":kill-word
"\C-f":forward-word
"\C-b":backward-word
"\C-a":beginning-of-line
"\C-e":end-of-line
"\C-k":kill-line
"\C-u":unix-line-discard
"\C-xdm": dump-macros
"\C-xdf": dump-functions
"\C-xdv": dump-variables
"\C-xr": re-read-init-file
"\C-^": " .. \C-m"
"jk": vi-movement-mode
#"\ek": menu-complete
#"\ej": menu-complete-backward
"\C-x\C-xb": " exec bash\C-m"
"\C-x\C-xg": : "\C-e | grep -e "
"\C-x\C-xl": "\C-e | less -RSNJ"
"\C-x\C-xw": "watch -c ""\ei"
"\C-gl": glob-list-expansions
"\C-gc": glob-complete-word
"\C-gw": glob-expand-word

## Bind <C-e> key to  alias expansion
"\C-xe": shell-expand-line
"\C-xh": history-expand-line
"\C-xa": alias-expand-line
"\C-o": operate-and-get-next
 #############################################################
 ## VI COMMAND Mode Key map
 #############################################################

set keymap vi
"\C-x\C-r": re-read-init-file
#Control-E: shell-expand-line
## bind <c-k> key to menu-complete readline completion
#"\ek": menu-complete
## bind <c-j> key to menu-complete (backward) readline completion
 #"\ej": menu-complete-backward
#"u": undo
## Add less at the end
"\C-x\C-xl": "A | less -RSNJjk"
"\C-x\C-xb": "ddAexec bashjk"
"\C-x\C-xg": "A | grep -e \e"

# Execute the command and go to the next in the history
"\C-o": operate-and-get-next
## Add watch at the beginning and cover the whole command in ""
"\C-x\C-xw": "Iwatch -c "jkA""jkhi
## Bind <C-e> key to shell expansion
"\C-xe": shell-expand-line
## Bind <C-e> key to  alias expansion
"\C-xa": alias-expand-line
## Bind <C-e> key to  history expansion
"\C-xh": history-expand-line

#Bash commands
"\C-x\C-xwh": "iwhile true; do sleep 0.5; echo \"Lorem Ipsum\"; done\e"
"\C-x\C-xif": "iif true; then echo \"Lorem Ipsum\";  fi\e"
"\C-x\C-xife": "iif  [ \"$t\" -eq \"0\" ] ; then echo \"Lorem Ipsum\";  elif [ \"$t\" -eq \"1\" ]; then echo \"Secundum\";  else echo \"Trictum\";  fi\e";
"\C-x\C-xf": "ifor index in {raz,dwa,trzy} ; do echo $index ; done\e"

################################################################
# SURROUND LIKE KEYS
################################################################

## Surround the WORD with
"sW\"": "Ea\"\eBi\"\e"
"sW\'": "Ea\'\eBi\'\e"
"sW\(": "Ea\)\eBi\(\e"
"sW\{": "Ea\}\eBi\{\e"
"sW\<": "Ea\>\eBi\<\e"
"sW\[": "Ea\]\eBi\[\e"

## Surround the word with
"sw\"": "ea\"\ebi\"\e"
"sw\'": "ea\'\ebi\'\e"
"sw\(": "ea\)\ebi\(\e"
"sw\)": "ea\)\ebi\(\e"
"sw\{": "ea\}\ebi\{\e"
"sw\}": "ea\}\ebi\{\e"
"sw\<": "ea\>\ebi\<\e"
"sw\>": "ea\>\ebi\<\e"
"sw\[": "ea\]\ebi\[\e"
"sw\]": "ea\]\ebi\[\e"

# Surround with ?  form the cursor to the end of the line
"S\'": "i\'\eA\'\e"
"S\"": "i\"\eA\"\e"
"S\(": "i\(\eA\)\e"
"S\{": "i\{\eA\}\e"
"S\<": "i\<\eA\>\e"
"S\[": "i\[\eA\]\e"
"S\)": "i\(\eA\)\e"
"S\}": "i\{\eA\}\e"
"S\>": "i\<\eA\>\e"
"S\]": "i\[\eA\]\e"

# Delete the surround
"sd\"": "F"xf"x"
"sd\'": "F'xf'x"
"sd\(": "F(xf)x"
"sd\{": "F{xf}x"
"sd\<": "F<xf>x"
"sd\[": "F[xf]x"
"sd\)": "F(xf)x"
"sd\}": "F{xf}x"
"sd\>": "F<xf>x"
"sd\]": "F[xf]x"

# Change the surround
"sc\'\"": "F\'r\",r\""
"sc\"\'": "F\"r',r'"

"sc({": "F(r{f)r}"
"sc){": "F(r{f)r}"
"sc(}": "F(r{f)r}"
"sc)}": "F(r{f)r}"

"sc{(": "F{r(f}r)"
"sc{)": "F{r(f}r)"
"sc}(": "F{r(f}r)"
"sc})": "F{r(f}r)"

"sc([": "F(r[f)r]"
"sc)[": "F(r[f)r]"
"sc(]": "F(r[f)r]"
"sc)]": "F(r[f)r]"

"sc[(": "F[r(f]r)"
"sc[)": "F[r(f]r)"
"sc](": "F[r(f]r)"
"sc])": "F[r(f]r)"


"sc{[": "F{r[f}r]"
"sc}[": "F{r[f}r]"
"sc{]": "F{r[f}r]"
"sc}]": "F{r[f}r]"

"sc[{": "F[r{f]r}"
"sc[}": "F[r{f]r}"
"sc]{": "F[r{f]r}"
"sc]}": "F[r{f]r}"

"gU": upcase-word
"gu": downcase-word
"qs": start-kbd-macro
"qe": end-kbd-macro
"qp": print-last-kbd-macro
"qc": call-last-kbd-macro

 #############################################################
 ## VI OPTIONS
 #############################################################
 set colored-stats
 #Default bell-style (audible)
 # set bell-style visible
 set bell-style audible
#Those below taken form reddit post :
#https://www.reddit.com/r/commandline/comments/kbeoe/you_can_make_readline_and_bash_much_more_user/

# When you have a folder with lots of similarly named files
# after completion with tab, the first part that has been completed will
# be replased by "...", and it is simple to see what you need to type to finish
# the completion
set completion-prefix-display-length 2
# on menu-complete, first display the common prefix, then cycle through the
# options when hitting TAB
set menu-complete-display-prefix on

# Make completions appear immediately after pressing TAB once.
# Instead of the default behavior which is to show them after pressing twice.
set show-all-if-ambiguous on
set show-all-if-unmodified on

# Enabled underscores (_) and hyphens (-) treated as equal when completing.
set completion-map-case on
# Change readline edit style to vim like style
 set editing-mode vi
set vi-ins-mode-string "\1\e[5 q\2"
set vi-cmd-mode-string "\1\e[1 q\2"
# set vi-ins-mode-string \1\e[48;5;117;1m\2 I \1\e[38;5;117;48;5;31;1m\2>\1\e[0m\2
# set vi-cmd-mode-string \1\e[48;5;166;1m\2 N \1\e[38;5;166;48;5;31;1m\2>\1\e[0m\2
##Vim Mode indicator in prompt
 set show-mode-in-prompt on
 #set vi-ins-mode-string \1\e[6 q\2
 #set vi-cmd-mode-string \1\e[2 q\2

set echo-control-characters off
set enable-bracketed-paste on
